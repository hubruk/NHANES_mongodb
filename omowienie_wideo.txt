MINIMUM:
podać zbiór do 5.12(włącznie)
100 nietrywialnych dokumentów po 3 pola
indeksy na jednej kolejkcji
bardziej złożone zapytanie z jednym/dwoma?(raz tak raz tak powiedział) indeksami
wytłumaczyć jak działają indeksy w mongo
3 różne funkcje (nie korzystamy z gotowych możemy napisać jakąś co ma inserta i przyjmuje jakieś parametry)
	jedna z nich korzysta z refenecji i dokumentów zagnieżdżonych
	i w praktyce (za pomocą zapytań) pokazanie i porównanie ich działania
i autoinkrementacje przy pomocji sekwencji
autoinkrementacja(za pomocą 



podaje zbiór, jak da okejke to git będzie dobrze działać, napisze jak znajdzie jakieś problemy czy jak będzie za prosty (jakby nie dało się zrealizować całego zadania)

conajmniej 100 nietrywialnych dokumentów, które mają po 3 lub więcej pól 
	najlepiej jakby było więcej pól i pola były różnych typów
	najlepiej taki zbiór gdzie da się zrobić powiązanie przez referecnje i dokument zagnieżdżony

indeksy na conajmniej jednej kolekcji i je testujemy
robimy indeksy i pozakujemy jak one działają (one się trochę różnią). Tutaj kolejność i kierunek indeksu występuje (w przeciwieństwie do relacyjnych). 
fajnie pokazać jak działają indeksy pełnotekstowe i geoprzestrzenne.

bardziej złożone zapytanie z jednym indeksem najlepiej wiele z wieloma indeksami

funkcje (jakby coś tam jeszcze po drodze robiła)

warto przejrzeć dokumentacje do mongo - zwłaszcza o tym jak wygląda dokument
kolekcja - takie pudełko trochę jak schema, możemy uporządkować rzeczy
	teoretycznie może być jedna kolekcja, ale możemy też sobie to odseparować jakoś 
	np. student to dokument, wszyscy mogliby być w jednej kolekcji studenci 
		jakaś średnia ocen w grupie, zapytanie jaka ocena + jakieś parametryzowanie
		każda kolekcja to osobny student, wtedy zapytania były prostrze -przynajmniej jeżeli pytalibyśmy o jakąś określoną grupę
dokument - konkretny oddawany obiekt (trochę jak wiersz, ale nie do końca), dokumenty w kolekcji mogę mieć różne ilości pól (pól - kolumn) - schemat dynamiczny (nie statyczny jak w relacyjnych) 
	teoretycznie każdy student może mieć różne dane (różne kolumny)
literówki w polu to lipa bo tworzy to nowe pole, bo przecież możemy mieć różne
dokumenty są w formacie bizon - przypomina .json
pola mogą mieć postać złożoną mogą też być listą w przeciwieństwie do baz relacyjnych
można miec zagnieżdżenia czyli w dokumencie w jakimś polu może być inny dokument
	dokument z drużyną piłkarska ma tak jakieś pola (nazwa drużyny, kiedy została założona itd.), reszte możemy zrobić na kilka sposobów
		mamy 11 zawodników drużyny i 
		startowa 11-stra i do tego lista nazwisk
		przez referencje, trochę jak hiperłącze w uml czyli odnosi nas do jakiegoś innego elementu (bierzemy sobie ID jakiegoś innego dokumentu (w mongo najprościej przy pomocy DBF?) i z tego robimy listę tych ID-ków, i za pomocą odniesień będziemy mogli wczytać jakieś informacje
		dokument zagnieżdżony, 11-tka to lista zawodników reprezentowanych przez dokumenty wypisane po przecinku (dokumenty zawierające informacje o konkretnym zawodniku) 
			możemy tak zagnieżdżać ile nam się chce (w sensie głębokości)
zagnieżdzenia są bardzo szybkie bo wyciągamy cały dokument i np. pytają o konkretną drużyną piłkarską jednym zapytaniem dostajemy całe informacje 
zagnieżdżenia są problematyczne dla aktualizacji/modyfikcaji i łatwo sprawić, że baza nie będzie spójna 
zagnieżdżenia dobre do odczytu
referencje odwrotnie aktualizacja/modyfikacja szybsza i spójność prostrza do osiągnięcia, odczyt trudniejszy
kwiestia na czym nam zależy

logika biznesowa:
jakieś funkcje 
autoinkrementacja przy pomocy sekwencji 
jakaś agregacja
jakieś dodania i modyfikacje elementów
nie trzeba pisać wszystkich, ale napisać że przydałoby się jeszcze kilka takich i takich trzeba by je napisać analogicznie jak to i to 
	#tutaj ostatnio zajebałeś dużo takich powtarzających się bajerów
	#może teraz dla oszczędzania tego nie rób, ale jak będziesz miał ochotę i wgl no to go for it, chyba że już się dupa będzie palić
można pisać funkcje w językach zewnętrznych - jakich się chce, byle działały

mongo upset dla update czy insert - sprawia że nie trzeba wpisywać instrukcji warunkowych. update jeżeli już jest/insert-u jako nowy. Sam sprawdza czy jest już rekord spełniający dane warunki.


różne mechanizmy tranzakcyjne - od prymitywnych, po jakieś bardziej złożone.
sprawdzamy jakie działają w naszej wersji mongo 
pokazujemy (najlepiej tą najlepszą) że działa lub nie tranzakcja dostępna w naszej wersji mongo


wybieramy do 3 zaawansowanych mongodb(zaawansowane czyli spoza tego zakresu o którym mówił)
"map reduce czy cup collection to są zdecydowanie rzeczy proste"
"takie rzeczy jak load balancing albo przetwarzanie danych grafowych to są rzeczy zdecydowanie trudniejszych"
poleca zao?zadania?zapytania?geoprzestrzenne bo są w miarę proste można tam pokazać cos - to z kilkoma funkcjami i indeksem geoprzestrzennym to już się liczy do tych bardziej zaawansowanych i jest za pełne punkty z tego
wybieramy coś przedstawiamy jak to działa, wady zalety 
WSZYSTKO OGÓLNIE POKAZUJEMY W PRAKTYCE - "JAK KTOŚ PRZEDSTAWI TYLKO OPIS TEORETYCZNY TO JEST NIC NIE WARTE"



na koniec krótko (nie przekraczamy 1/4 str) wnioski (naistotniejsze rzeczy) różnice pomiędzy bazą dokumentową a relacyjną i jakie musielibyśmy mieć zmieny pomiędzy bazą relacyjną a dokumentową jakbyśmy chcieli mieć te same dane w bazie relacyjnej czy musielibyśmy coś zmienić czy jednak nie 


mongodb jest w mainstreamie i ma swój interfejs graficzny oraz tekstowy
tekstowy wywołujemy przez mongo exe i jest on najpewniejszy, znaczy na pewno wtedy wszystko działa
interfejs graficzny to compas i można mieć przez niego np. problem z instalacją, niektóre zapytania mogą w nim dawać złe wyniki on też nie jest najwygodniejszy, ewentualnie są inne interfejsy
nosql ... for mongodb, studio3t, monkery? - żaden nie jest idealny każdy ma tam jakieś swoje cechy
